{"version":3,"sources":["../../../lib/utils/zip-stream.js"],"names":["events","require","JSZip","PromiseLib","StreamBuf","ZipReader","options","count","jsZip","stream","on","_process","getEntryType","Promise","resolve","then","emit","content","read","loadAsync","zip","forEach","path","entry","dir","async","data","entryStream","write","autodrain","_finished","error","encoding","callback","cork","uncork","end","EventEmitter","ZipWriter","Object","assign","type","compression","hasOwnProperty","base64","file","name","generateAsync","size","setEncoding","pause","resume","isPaused","destination","pipe","unpipe","chunk","unshift","wrap","module","exports"],"mappings":"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","sourcesContent":["const events = require('events');\r\nconst JSZip = require('jszip');\r\nconst PromiseLib = require('./promise');\r\n\r\nconst StreamBuf = require('./stream-buf');\r\n\r\n// The purpose of this module is to wrap the js-zip library into a streaming zip library\r\n// since most of the exceljs code uses streams.\r\n// One day I might find (or build) a properly streaming browser safe zip lib\r\n\r\n\r\n// =============================================================================\r\n// The ZipReader class\r\n// Unpacks an incoming zip stream\r\nclass ZipReader extends events.EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n\r\n    this.count = 0;\r\n    this.jsZip = new JSZip();\r\n    this.stream = new StreamBuf();\r\n    this.stream.on('finish', () => {\r\n      this._process();\r\n    });\r\n    this.getEntryType = options.getEntryType || (() => 'string');\r\n  };\r\n\r\n  _finished() {\r\n    if (!--this.count) {\r\n      PromiseLib.Promise.resolve().then(() => {\r\n        this.emit('finished');\r\n      });\r\n    }\r\n  }\r\n\r\n  _process() {\r\n    const content = this.stream.read();\r\n    this.jsZip\r\n      .loadAsync(content)\r\n      .then(zip => {\r\n        zip.forEach((path, entry) => {\r\n          if (!entry.dir) {\r\n            this.count++;\r\n            entry\r\n              .async(this.getEntryType(path))\r\n              .then(data => {\r\n                const entryStream = new StreamBuf();\r\n                entryStream.path = path;\r\n                entryStream.write(data);\r\n                entryStream.autodrain = () => {\r\n                  this._finished();\r\n                };\r\n                entryStream.on('finish', () => {\r\n                  this._finished();\r\n                });\r\n\r\n                this.emit('entry', entryStream);\r\n              })\r\n              .catch(error => {\r\n                this.emit('error', error);\r\n              });\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.emit('error', error);\r\n      });\r\n  }\r\n\r\n  // ==========================================================================\r\n  // Stream.Writable interface\r\n  write(data, encoding, callback) {\r\n    if (this.error) {\r\n      if (callback) {\r\n        callback(this.error);\r\n      }\r\n      throw this.error;\r\n    } else {\r\n      return this.stream.write(data, encoding, callback);\r\n    }\r\n  }\r\n\r\n  cork() {\r\n    return this.stream.cork();\r\n  }\r\n\r\n  uncork() {\r\n    return this.stream.uncork();\r\n  }\r\n\r\n  end() {\r\n    return this.stream.end();\r\n  }\r\n\r\n  destroy(error) {\r\n    this.emit('finished');\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// The ZipWriter class\r\n// Packs streamed data into an output zip stream\r\nclass ZipWriter extends events.EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n    this.options = Object.assign({\r\n      type: 'nodebuffer',\r\n      compression: 'DEFLATE',\r\n    }, options);\r\n\r\n    this.zip = new JSZip();\r\n    this.stream = new StreamBuf();\r\n  };\r\n\r\n  append(data, options) {\r\n    if (options.hasOwnProperty('base64') && options.base64) {\r\n      this.zip.file(options.name, data, {base64: true});\r\n    } else {\r\n      this.zip.file(options.name, data);\r\n    }\r\n  }\r\n\r\n  finalize() {\r\n    return this.zip.generateAsync(this.options).then(content => {\r\n      this.stream.end(content);\r\n      this.emit('finish');\r\n    });\r\n  }\r\n\r\n  // ==========================================================================\r\n  // Stream.Readable interface\r\n  read(size) {\r\n    return this.stream.read(size);\r\n  }\r\n\r\n  setEncoding(encoding) {\r\n    return this.stream.setEncoding(encoding);\r\n  }\r\n\r\n  pause() {\r\n    return this.stream.pause();\r\n  }\r\n\r\n  resume() {\r\n    return this.stream.resume();\r\n  }\r\n\r\n  isPaused() {\r\n    return this.stream.isPaused();\r\n  }\r\n\r\n  pipe(destination, options) {\r\n    return this.stream.pipe(\r\n      destination,\r\n      options\r\n    );\r\n  }\r\n\r\n  unpipe(destination) {\r\n    return this.stream.unpipe(destination);\r\n  }\r\n\r\n  unshift(chunk) {\r\n    return this.stream.unshift(chunk);\r\n  }\r\n\r\n  wrap(stream) {\r\n    return this.stream.wrap(stream);\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n\r\nmodule.exports = {\r\n  ZipReader,\r\n  ZipWriter,\r\n};\r\n"],"file":"zip-stream.js"}